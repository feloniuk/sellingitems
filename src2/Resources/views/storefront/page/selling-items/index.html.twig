{% sw_extends '@Storefront/storefront/base.html.twig' %}

{% block base_content %}
<div class="dressing-room-page">
    <div class="dressing-room-container">
        <!-- Welcome Title -->
        <div class="welcome-header">
            <h1>Welcome in <span class="highlight">Dressing Room</span></h1>
        </div>

        <div class="dressing-room-content">
            <!-- Left Side - Character Display -->
            <div class="character-section">
                <h2>Your Character</h2>
                
                <div class="character-display">
                    <div class="character-avatar" id="character-avatar">
                        {% if selectedItem and selectedItem.mainImage %}
                            {# Use Shopware's media URL generation #}
                            {% set mainImage = selectedItem.mainImage %}
                            {% if mainImage.url %}
                                <img src="{{ mainImage.url }}" 
                                     alt="{{ selectedItem.title }}" 
                                     class="main-character-image">
                            {% else %}
                                <img src="{{ mainImage|sw_encode_media_url }}" 
                                     alt="{{ selectedItem.title }}" 
                                     class="main-character-image">
                            {% endif %}
                        {% else %}
                            <div class="default-character">
                                <img src="{{ asset('bundles/storefront/assets/icon/default/avatar.svg') }}" 
                                     alt="Default Character">
                            </div>
                        {% endif %}
                    </div>
                    
                    <div id="add-to-cart-container">
                        {% if selectedItem %}
                            <div class="add-to-cart-section">
                                <button class="add-to-cart-btn" data-item-id="{{ selectedItem.id }}">
                                    Add to Cart<br>
                                    <span class="price">€{{ selectedItem.price|number_format(2, '.', ',') }}</span>
                                </button>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>

            <!-- Right Side - Wardrobe Catalog -->
            <div class="wardrobe-section">
                <div class="wardrobe-header">
                    <span class="wardrobe-label">Wardrobe</span>
                    <span class="catalog-label">Catalog</span>
                </div>

                <!-- Search Bar -->
                <div class="search-bar">
                    <input type="text" 
                           id="item-search" 
                           class="search-input" 
                           placeholder="Search items..." 
                           value="">
                    <button class="search-btn" onclick="performSearch()">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <circle cx="11" cy="11" r="8"></circle>
                            <path d="m21 21-4.35-4.35"></path>
                        </svg>
                    </button>
                </div>

                <!-- Category Filter Tabs -->
                <div class="category-tabs">
                    <!-- Category buttons -->
                    <div class="category-buttons">
                        <button class="category-btn{% if not selectedCategory %} active{% endif %}" 
                                data-category-id=""
                                onclick="filterByCategory(null)">
                            All
                        </button>
                        {% if categories.total > 0 %}
                            {% for category in categories %}
                                <button class="category-btn{% if selectedCategory == category.id %} active{% endif %}" 
                                        data-category-id="{{ category.id }}"
                                        onclick="filterByCategory('{{ category.id }}')">
                                    {{ category.name }}
                                </button>
                            {% endfor %}
                        {% endif %}
                        <button class="category-btn sort-btn" onclick="toggleSort()">
                            Sort by Price <span class="sort-arrow" id="sort-arrow">{{ app.request.get('order') == 'desc' ? '↑' : '↓' }}</span>
                        </button>
                    </div>
                </div>

                <!-- Items Grid -->
                <div class="items-grid" id="items-grid">
                    <!-- Items will be loaded here via AJAX -->
                    {% include '@SellingItems/storefront/page/selling-items/items-grid.html.twig' %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Spinner -->
<div class="loading-spinner" id="loading-spinner">
    <div class="spinner"></div>
</div>

<style>
.dressing-room-page {
    min-height: 100vh;
    background: linear-gradient(135deg, #1e1e2e 0%, #2d2d44 100%);
    color: #fff;
    font-family: 'Arial', sans-serif;
    padding: 20px 0;
}

.dressing-room-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
}

.welcome-header {
    text-align: center;
    margin-bottom: 40px;
}

.welcome-header h1 {
    font-size: 2.5rem;
    font-weight: bold;
    color: #fff;
    margin: 0;
}

.highlight {
    color: #ff4757;
}

.dressing-room-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 40px;
    align-items: start;
}

/* Search Bar */
.search-bar {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.search-input {
    flex: 1;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    padding: 10px 15px;
    border-radius: 25px;
    font-size: 0.9rem;
    outline: none;
    transition: all 0.3s ease;
}

.search-input:focus {
    background: rgba(255, 255, 255, 0.15);
    border-color: #ff4757;
}

.search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

.search-btn {
    background: #ff4757;
    border: none;
    color: white;
    padding: 10px 20px;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.search-btn:hover {
    background: #ff3742;
    transform: translateY(-2px);
}

/* Character Section */
.character-section h2 {
    font-size: 1.8rem;
    margin-bottom: 30px;
    color: #ddd;
}

.character-display {
    text-align: center;
}

.character-avatar {
    width: 300px;
    height: 400px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    margin: 0 auto 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid rgba(255, 255, 255, 0.2);
    overflow: hidden;
    transition: all 0.3s ease;
}

.main-character-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.default-character {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
}

.default-character img {
    width: 150px;
    height: 200px;
    opacity: 0.5;
}

.add-to-cart-btn {
    background: #ff4757;
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}

.add-to-cart-btn:hover {
    background: #ff3742;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(255, 71, 87, 0.4);
}

.price {
    font-size: 1.2rem;
    display: block;
    margin-top: 5px;
}

/* Wardrobe Section */
.wardrobe-section {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    padding: 30px;
    backdrop-filter: blur(10px);
}

.wardrobe-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
}

.wardrobe-label, .catalog-label {
    font-size: 1.5rem;
    font-weight: bold;
}

.catalog-label {
    color: #ff4757;
}

/* Category Tabs */
.category-tabs {
    margin-bottom: 30px;
}

.category-buttons {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.category-btn {
    background: rgba(255, 255, 255, 0.08);
    color: #ddd;
    border: 1px solid rgba(255, 255, 255, 0.1);
    padding: 8px 16px;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
}

.category-btn:hover, .category-btn.active {
    background: rgba(255, 71, 87, 0.3);
    border-color: #ff4757;
    color: white;
}

.sort-btn .sort-arrow {
    margin-left: 5px;
    font-size: 0.8rem;
}

/* Items Grid */
.items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 20px;
    max-height: 600px;
    overflow-y: auto;
    padding-right: 10px;
    position: relative;
    min-height: 200px;
}

.items-grid::-webkit-scrollbar {
    width: 8px;
}

.items-grid::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

.items-grid::-webkit-scrollbar-thumb {
    background: #ff4757;
    border-radius: 4px;
}

.item-card {
    background: rgba(255, 255, 255, 0.08);
    border-radius: 15px;
    padding: 15px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    position: relative;
}

.item-card:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.12);
    border-color: rgba(255, 71, 87, 0.5);
}

.item-card.selected {
    border-color: #ff4757;
    background: rgba(255, 71, 87, 0.2);
}

.item-image {
    width: 80px;
    height: 80px;
    margin: 0 auto 15px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.item-image img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.item-placeholder {
    color: rgba(255, 255, 255, 0.3);
}

.try-on-btn {
    background: #ff4757;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    cursor: pointer;
    width: 100%;
    transition: all 0.3s ease;
}

.try-on-btn:hover {
    background: #ff3742;
}

.item-price {
    font-size: 0.9rem;
    display: block;
    margin-top: 3px;
}

.no-items {
    grid-column: 1 / -1;
    text-align: center;
    color: #999;
    padding: 40px;
}

/* Loading Spinner */
.loading-spinner {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.loading-spinner.active {
    display: flex;
}

.spinner {
    width: 50px;
    height: 50px;
    border: 5px solid rgba(255, 255, 255, 0.3);
    border-top-color: #ff4757;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Responsive */
@media (max-width: 1024px) {
    .dressing-room-content {
        grid-template-columns: 1fr;
        gap: 30px;
    }
    
    .character-avatar {
        width: 250px;
        height: 320px;
    }
}

@media (max-width: 768px) {
    .welcome-header h1 {
        font-size: 2rem;
    }
    
    .items-grid {
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 15px;
    }
    
    .character-avatar {
        width: 200px;
        height: 250px;
    }
}
</style>

<script>
// State management
let selectedItemId = '{{ selectedItem ? selectedItem.id : '' }}';
let currentCategory = '{{ selectedCategory ? selectedCategory : '' }}';
let currentSort = '{{ app.request.get('sort', 'createdAt') }}';
let currentOrder = '{{ app.request.get('order', 'desc') }}';
let searchQuery = '';
let searchTimeout = null;

// Initialize data attributes for items
const itemsData = {
    {% for item in items %}
    '{{ item.id }}': {
        id: '{{ item.id }}',
        title: '{{ item.title|e('js') }}',
        price: {{ item.price ?? 0 }},
        mainImage: '{{ item.mainImage ? (item.mainImage.url ? item.mainImage.url : item.mainImage|sw_encode_media_url) : '' }}',
        previewImage: '{{ item.previewImage ? (item.previewImage.url ? item.previewImage.url : item.previewImage|sw_encode_media_url) : '' }}'
    }{% if not loop.last %},{% endif %}
    {% endfor %}
};

function showLoading() {
    document.getElementById('loading-spinner').classList.add('active');
}

function hideLoading() {
    document.getElementById('loading-spinner').classList.remove('active');
}

function selectItem(itemId) {
    // Remove previous selection
    document.querySelectorAll('.item-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    // Add selection to clicked item
    const selectedCard = document.querySelector(`[data-item-id="${itemId}"]`);
    if (selectedCard) {
        selectedCard.classList.add('selected');
        selectedItemId = itemId;
        
        // Update character display
        updateCharacterDisplay(itemId);
        
        // Update URL without reloading
        updateURL();
    }
}

function updateCharacterDisplay(itemId) {
    const itemData = itemsData[itemId];
    if (!itemData) return;
    
    const characterAvatar = document.getElementById('character-avatar');
    const addToCartContainer = document.getElementById('add-to-cart-container');
    
    if (itemData.mainImage) {
        characterAvatar.innerHTML = `<img src="${itemData.mainImage}" alt="${itemData.title}" class="main-character-image">`;
    } else {
        characterAvatar.innerHTML = `
            <div class="default-character">
                <img src="{{ asset('bundles/storefront/assets/icon/default/avatar.svg') }}" alt="Default Character">
            </div>`;
    }
    
    // Update add to cart button
    addToCartContainer.innerHTML = `
        <div class="add-to-cart-section">
            <button class="add-to-cart-btn" data-item-id="${itemData.id}">
                Add to Cart<br>
                <span class="price">€${itemData.price.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</span>
            </button>
        </div>`;
}

function filterByCategory(categoryId) {
    currentCategory = categoryId || '';
    
    // Update active button
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    const activeBtn = categoryId 
        ? document.querySelector(`[data-category-id="${categoryId}"]`)
        : document.querySelector('[data-category-id=""]');
    
    if (activeBtn) {
        activeBtn.classList.add('active');
    }
    
    loadItems();
}

function toggleSort() {
    if (currentSort === 'price') {
        currentOrder = currentOrder === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort = 'price';
        currentOrder = 'asc';
    }
    
    // Update sort arrow
    document.getElementById('sort-arrow').textContent = currentOrder === 'desc' ? '↑' : '↓';
    
    loadItems();
}

function performSearch() {
    searchQuery = document.getElementById('item-search').value;
    
    // Clear existing timeout
    if (searchTimeout) {
        clearTimeout(searchTimeout);
    }
    
    // Debounce search
    searchTimeout = setTimeout(() => {
        loadItems();
    }, 300);
}

function loadItems() {
    showLoading();
    
    // Build query parameters
    const params = new URLSearchParams();
    if (currentCategory) params.append('category', currentCategory);
    if (currentSort) params.append('sort', currentSort);
    if (currentOrder) params.append('order', currentOrder);
    if (searchQuery) params.append('search', searchQuery);
    if (selectedItemId) params.append('selected', selectedItemId);
    params.append('ajax', '1');
    
    // Fetch items
    fetch(`{{ path('frontend.selling-items.index') }}?${params.toString()}`, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.text())
    .then(html => {
        // Parse the response and extract items grid
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newItemsGrid = doc.querySelector('#items-grid-content');
        
        if (newItemsGrid) {
            document.getElementById('items-grid').innerHTML = newItemsGrid.innerHTML;
            
            // Update items data from new items
            const newItems = doc.querySelectorAll('.item-card');
            newItems.forEach(item => {
                const id = item.getAttribute('data-item-id');
                if (id && !itemsData[id]) {
                    itemsData[id] = {
                        id: id,
                        title: item.getAttribute('data-item-title'),
                        price: parseFloat(item.getAttribute('data-item-price')),
                        mainImage: item.getAttribute('data-main-image'),
                        previewImage: item.querySelector('.item-image img')?.src || ''
                    };
                }
            });
            
            // Re-select current item if it exists
            if (selectedItemId && document.querySelector(`[data-item-id="${selectedItemId}"]`)) {
                selectItem(selectedItemId);
            } else {
                // Select first item if no selection
                const firstItem = document.querySelector('.item-card');
                if (firstItem) {
                    selectItem(firstItem.getAttribute('data-item-id'));
                }
            }
        }
        
        hideLoading();
        updateURL();
    })
    .catch(error => {
        console.error('Error loading items:', error);
        hideLoading();
    });
}

function updateURL() {
    const params = new URLSearchParams();
    if (currentCategory) params.append('category', currentCategory);
    if (currentSort !== 'createdAt') params.append('sort', currentSort);
    if (currentOrder !== 'desc') params.append('order', currentOrder);
    if (searchQuery) params.append('search', searchQuery);
    if (selectedItemId) params.append('selected', selectedItemId);
    
    const newURL = `${window.location.pathname}${params.toString() ? '?' + params.toString() : ''}`;
    window.history.pushState({}, '', newURL);
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    // Search input event
    const searchInput = document.getElementById('item-search');
    searchInput.addEventListener('input', performSearch);
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });
    
    // Auto-select first item if not already selected
    if (!selectedItemId) {
        const firstItem = document.querySelector('.item-card');
        if (firstItem) {
            selectItem(firstItem.getAttribute('data-item-id'));
        }
    }
    
    // Add click handlers for add to cart buttons
    document.addEventListener('click', function(e) {
        if (e.target.closest('.add-to-cart-btn')) {
            const btn = e.target.closest('.add-to-cart-btn');
            const itemId = btn.getAttribute('data-item-id');
            console.log('Add to cart:', itemId);
            // Here you would implement the actual add to cart functionality
        }
    });
});
</script>
{% endblock %}