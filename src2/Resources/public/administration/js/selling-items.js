!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p=(window.__sw__.assetPath + '/bundles/sellingitems/'),i(i.s="oqc2")}({"B+L1":function(e,t){Shopware.Component.extend("selling-items-create","selling-items-detail",{methods:{getItem:function(){this.item=this.repository.create(Shopware.Context.api),this.item.active=!0},onClickSave:function(){var e=this;this.isLoading=!0,this.repository.save(this.item,Shopware.Context.api).then((function(){e.isLoading=!1,e.$router.push({name:"selling.items.detail",params:{id:e.item.id}}),e.createNotificationSuccess({title:e.$tc("selling-items.detail.successTitle"),message:e.$tc("selling-items.detail.successMessage")})})).catch((function(t){e.isLoading=!1,e.createNotificationError({title:e.$tc("selling-items.detail.errorTitle"),message:t})}))}}})},oqc2:function(e,t,i){"use strict";i.r(t);var n=Shopware,r=n.Component,s=n.Mixin,a=Shopware.Data.Criteria;r.register("selling-items-list",{template:'{% block selling_items_list %}\r\n    <sw-page class="selling-items-list">\r\n        {% block selling_items_list_smart_bar_header %}\r\n            <template #smart-bar-header>\r\n                {% block selling_items_list_smart_bar_header_title %}\r\n                    <h2>{{ $tc(\'selling-items.list.textTitle\') }}</h2>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n\r\n        {% block selling_items_list_smart_bar_actions %}\r\n            <template #smart-bar-actions>\r\n                {% block selling_items_list_smart_bar_actions_add %}\r\n                    <sw-button\r\n                        :routerLink="{ name: \'selling.items.create\' }"\r\n                        variant="primary">\r\n                        {{ $tc(\'selling-items.list.buttonAddItem\') }}\r\n                    </sw-button>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n\r\n        {% block selling_items_list_content %}\r\n            <template #content>\r\n                {% block selling_items_list_content_list %}\r\n                    <sw-entity-listing\r\n                        v-if="items"\r\n                        :items="items"\r\n                        :repository="repository"\r\n                        :showSelection="false"\r\n                        :columns="columns"\r\n                        detailRoute="selling.items.detail"\r\n                        :isLoading="isLoading"\r\n                        @update-records="updateTotal">\r\n                    </sw-entity-listing>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n    </sw-page>\r\n{% endblock %}',inject:["repositoryFactory"],mixins:[s.getByName("listing")],data:function(){return{items:null,isLoading:!0,sortBy:"createdAt",sortDirection:"DESC"}},metaInfo:function(){return{title:this.$createTitle()}},computed:{repository:function(){return this.repositoryFactory.create("selling_item")},columns:function(){return[{property:"title",dataIndex:"title",label:"selling-items.list.columnTitle",routerLink:"selling.items.detail",primary:!0},{property:"subtitle",dataIndex:"subtitle",label:"selling-items.list.columnSubtitle"},{property:"price",dataIndex:"price",label:"selling-items.list.columnPrice"},{property:"category.name",dataIndex:"category.name",label:"selling-items.list.columnCategory"},{property:"active",dataIndex:"active",label:"selling-items.list.columnActive"}]}},methods:{getList:function(){var e=this,t=new a(this.page,this.limit);t.setTerm(this.term),t.addSorting(a.sort(this.sortBy,this.sortDirection)),t.addAssociation("category"),t.addAssociation("mainImage"),t.addAssociation("previewImage"),this.isLoading=!0,this.repository.search(t).then((function(t){e.items=t,e.total=t.total,e.isLoading=!1}))},updateTotal:function(e){var t=e.total;this.total=t}}});var l=Shopware,o=l.Component,c=l.Mixin,m=Shopware.Data.Criteria;o.register("selling-items-detail",{template:'{% block selling_items_detail %}\r\n    <sw-page class="selling-items-detail">\r\n        <template #smart-bar-header>\r\n            <h2>{{ item ? item.title : \'\' }}</h2>\r\n        </template>\r\n\r\n        <template #smart-bar-actions>\r\n            <sw-button-process\r\n                :isLoading="isLoading"\r\n                :processSuccess="processSuccess"\r\n                variant="primary"\r\n                @process-finish="saveFinish"\r\n                @click="onClickSave">\r\n                {{ $tc(\'selling-items.detail.buttonSave\') }}\r\n            </sw-button-process>\r\n        </template>\r\n\r\n        <template #content>\r\n            <sw-card-view>\r\n                <sw-card v-if="item" :isLoading="isLoading">\r\n                    <sw-field \r\n                        v-model="item.title"\r\n                        :label="$tc(\'selling-items.detail.titleLabel\')"\r\n                        required>\r\n                    </sw-field>\r\n\r\n                    <sw-field \r\n                        v-model="item.subtitle"\r\n                        :label="$tc(\'selling-items.detail.subtitleLabel\')">\r\n                    </sw-field>\r\n\r\n                    <sw-field \r\n                        v-model="item.link"\r\n                        :label="$tc(\'selling-items.detail.linkLabel\')">\r\n                    </sw-field>\r\n\r\n                    <sw-number-field\r\n                        v-model="item.price"\r\n                        :label="$tc(\'selling-items.detail.priceLabel\')"\r\n                        :min="0"\r\n                        :step="0.01"\r\n                        numberType="float">\r\n                    </sw-number-field>\r\n\r\n                    <sw-entity-single-select\r\n                        v-model="item.categoryId"\r\n                        entity="selling_item_category"\r\n                        :label="$tc(\'selling-items.detail.categoryLabel\')"\r\n                        :criteria="categoryCriteria"\r\n                        required>\r\n                    </sw-entity-single-select>\r\n\r\n                    <sw-media-upload-v2\r\n                        :label="$tc(\'selling-items.detail.mainImageLabel\')"\r\n                        :source="item.mainImageId"\r\n                        @media-upload-add-file="item.mainImageId = $event">\r\n                    </sw-media-upload-v2>\r\n\r\n                    <sw-media-upload-v2\r\n                        :label="$tc(\'selling-items.detail.previewImageLabel\')"\r\n                        :source="item.previewImageId"\r\n                        @media-upload-add-file="item.previewImageId = $event">\r\n                    </sw-media-upload-v2>\r\n\r\n                    <sw-switch-field\r\n                        v-model="item.active"\r\n                        :label="$tc(\'selling-items.detail.activeLabel\')">\r\n                    </sw-switch-field>\r\n                </sw-card>\r\n            </sw-card-view>\r\n        </template>\r\n    </sw-page>\r\n{% endblock %}',inject:["repositoryFactory"],mixins:[c.getByName("notification")],metaInfo:function(){return{title:this.$createTitle()}},data:function(){return{item:null,isLoading:!1,processSuccess:!1,repository:null}},computed:{categoryRepository:function(){return this.repositoryFactory.create("selling_item_category")},categoryCriteria:function(){var e=new m;return e.addFilter(m.equals("active",!0)),e}},created:function(){this.repository=this.repositoryFactory.create("selling_item"),this.getItem()},methods:{getItem:function(){var e=this;if(this.$route.params.id){var t=new m;t.addAssociation("category"),t.addAssociation("mainImage"),t.addAssociation("previewImage"),this.repository.get(this.$route.params.id,Shopware.Context.api,t).then((function(t){e.item=t}))}},onClickSave:function(){var e=this;this.isLoading=!0,this.repository.save(this.item,Shopware.Context.api).then((function(){e.getItem(),e.isLoading=!1,e.processSuccess=!0})).catch((function(t){e.isLoading=!1,e.createNotificationError({title:e.$tc("selling-items.detail.errorTitle"),message:t})}))},saveFinish:function(){this.processSuccess=!1}}});i("B+L1");Shopware.Module.register("selling-items",{type:"plugin",name:"selling-items",title:"selling-items.general.mainMenuItemGeneral",description:"selling-items.general.descriptionTextModule",color:"#ff3d58",icon:"default-shopping-paper-bag-product",routes:{list:{component:"selling-items-list",path:"list"},detail:{component:"selling-items-detail",path:"detail/:id",meta:{parentPath:"selling.items.list"}},create:{component:"selling-items-create",path:"create",meta:{parentPath:"selling.items.list"}}},navigation:[{label:"selling-items.general.mainMenuItemGeneral",color:"#ff3d58",path:"selling.items.list",icon:"default-shopping-paper-bag-product",position:100,parent:"sw-catalogue"}]});var d=Shopware,g=d.Component,p=d.Mixin,u=Shopware.Data.Criteria;g.register("selling-items-category-list",{template:'{% block selling_items_category_list %}\r\n    <sw-page class="selling-items-category-list">\r\n        {% block selling_items_category_list_smart_bar_header %}\r\n            <template #smart-bar-header>\r\n                {% block selling_items_category_list_smart_bar_header_title %}\r\n                    <h2>{{ $tc(\'selling-items-category.list.textTitle\') }}</h2>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n\r\n        {% block selling_items_category_list_smart_bar_actions %}\r\n            <template #smart-bar-actions>\r\n                {% block selling_items_category_list_smart_bar_actions_add %}\r\n                    <sw-button\r\n                        :routerLink="{ name: \'selling.items.category.create\' }"\r\n                        variant="primary">\r\n                        {{ $tc(\'selling-items-category.list.buttonAddCategory\') }}\r\n                    </sw-button>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n\r\n        {% block selling_items_category_list_content %}\r\n            <template #content>\r\n                {% block selling_items_category_list_content_list %}\r\n                    <sw-entity-listing\r\n                        v-if="items"\r\n                        :items="items"\r\n                        :repository="repository"\r\n                        :showSelection="false"\r\n                        :columns="columns"\r\n                        detailRoute="selling.items.category.detail"\r\n                        :isLoading="isLoading"\r\n                        @update-records="updateTotal">\r\n                    </sw-entity-listing>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n    </sw-page>\r\n{% endblock %}',inject:["repositoryFactory"],mixins:[p.getByName("listing")],data:function(){return{items:null,isLoading:!0,sortBy:"createdAt",sortDirection:"DESC"}},metaInfo:function(){return{title:this.$createTitle()}},computed:{repository:function(){return this.repositoryFactory.create("selling_item_category")},columns:function(){return[{property:"name",dataIndex:"name",label:"selling-items-category.list.columnName",routerLink:"selling.items.category.detail",primary:!0},{property:"active",dataIndex:"active",label:"selling-items-category.list.columnActive"}]}},methods:{getList:function(){var e=this,t=new u(this.page,this.limit);t.setTerm(this.term),t.addSorting(u.sort(this.sortBy,this.sortDirection)),this.isLoading=!0,this.repository.search(t).then((function(t){e.items=t,e.total=t.total,e.isLoading=!1}))},updateTotal:function(e){var t=e.total;this.total=t}}});var h=Shopware,y=h.Component,f=h.Mixin;y.register("selling-items-category-detail",{template:'{% block selling_items_category_detail %}\r\n    <sw-page class="selling-items-category-detail">\r\n        <template #smart-bar-header>\r\n            <h2>{{ item ? item.name : \'\' }}</h2>\r\n        </template>\r\n\r\n        <template #smart-bar-actions>\r\n            <sw-button-process\r\n                :isLoading="isLoading"\r\n                :processSuccess="processSuccess"\r\n                variant="primary"\r\n                @process-finish="saveFinish"\r\n                @click="onClickSave">\r\n                {{ $tc(\'selling-items-category.detail.buttonSave\') }}\r\n            </sw-button-process>\r\n        </template>\r\n\r\n        <template #content>\r\n            <sw-card-view>\r\n                <sw-card v-if="item" :isLoading="isLoading">\r\n                    <sw-field \r\n                        v-model="item.name"\r\n                        :label="$tc(\'selling-items-category.detail.nameLabel\')"\r\n                        required>\r\n                    </sw-field>\r\n\r\n                    <sw-switch-field\r\n                        v-model="item.active"\r\n                        :label="$tc(\'selling-items-category.detail.activeLabel\')">\r\n                    </sw-switch-field>\r\n                </sw-card>\r\n            </sw-card-view>\r\n        </template>\r\n    </sw-page>\r\n{% endblock %}',inject:["repositoryFactory"],mixins:[f.getByName("notification")],metaInfo:function(){return{title:this.$createTitle()}},data:function(){return{item:null,isLoading:!1,processSuccess:!1,repository:null}},created:function(){this.repository=this.repositoryFactory.create("selling_item_category"),this.getItem()},methods:{getItem:function(){var e=this;this.$route.params.id&&this.repository.get(this.$route.params.id,Shopware.Context.api).then((function(t){e.item=t}))},onClickSave:function(){var e=this;this.isLoading=!0,this.repository.save(this.item,Shopware.Context.api).then((function(){e.getItem(),e.isLoading=!1,e.processSuccess=!0})).catch((function(t){e.isLoading=!1,e.createNotificationError({title:e.$tc("selling-items-category.detail.errorTitle"),message:t})}))},saveFinish:function(){this.processSuccess=!1}}});i("qeCZ");Shopware.Module.register("selling-items-category",{type:"plugin",name:"selling-items-category",title:"selling-items-category.general.mainMenuItemGeneral",description:"selling-items-category.general.descriptionTextModule",color:"#ff3d58",icon:"default-folder-full",routes:{list:{component:"selling-items-category-list",path:"list"},detail:{component:"selling-items-category-detail",path:"detail/:id",meta:{parentPath:"selling.items.category.list"}},create:{component:"selling-items-category-create",path:"create",meta:{parentPath:"selling.items.category.list"}}},navigation:[{label:"selling-items-category.general.mainMenuItemGeneral",color:"#ff3d58",path:"selling.items.category.list",icon:"default-folder-full",position:110,parent:"sw-catalogue"}]})},qeCZ:function(e,t){Shopware.Component.extend("selling-items-category-create","selling-items-category-detail",{methods:{getItem:function(){this.item=this.repository.create(Shopware.Context.api),this.item.active=!0},onClickSave:function(){var e=this;this.isLoading=!0,this.repository.save(this.item,Shopware.Context.api).then((function(){e.isLoading=!1,e.$router.push({name:"selling.items.category.detail",params:{id:e.item.id}}),e.createNotificationSuccess({title:e.$tc("selling-items-category.detail.successTitle"),message:e.$tc("selling-items-category.detail.successMessage")})})).catch((function(t){e.isLoading=!1,e.createNotificationError({title:e.$tc("selling-items-category.detail.errorTitle"),message:t})}))}}})}});
//# sourceMappingURL=selling-items.js.map